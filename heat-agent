#!/usr/bin/python
#
# Copyright 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import base64
import email.parser
import hashlib
import hmac
import json
import os
import subprocess
import sys
import urllib
import urllib2
import urlparse
import xml.etree.ElementTree

def get_cfn_init_data():
  user_data = urllib.urlopen("http://169.254.169.254/latest/user-data")
  parser = email.parser.Parser()
  msg = parser.parse(user_data)
  for part in msg.walk():
    if part.get_filename() == "cfn-init-data":
      return json.loads(part.get_payload())

def canonical_qs(params):
  keys = list(params)
  keys.sort()
  pairs = []
  for key in keys:
    val = params[key].encode("utf-8")
    val = urllib.quote(val, safe='-_~')
    pairs.append(urllib.quote(key, safe='') + '=' + val)
  qs = '&'.join(pairs)
  return qs

def sign(cfndata, dct):
  dct.update({ "AWSAccessKeyId": cfndata["access_key_id"],
               "SignatureVersion": "2",
               "SignatureMethod": "HmacSHA256" })

  url = urlparse.urlparse(cfndata["metadata_url"])

  msg = "\n".join(["GET", url.netloc, url.path, canonical_qs(dct)])
  sig = hmac.new(str(cfndata["secret_access_key"]), msg, hashlib.sha256).digest()
  dct["Signature"] = base64.b64encode(sig)

  return dct

def describe_stack_resource(cfn_data):
  dct = { "StackName": cfn_data["stack_name"],
          "Action": "DescribeStackResource",
          "LogicalResourceId": "server" }
  
  dct = sign(cfn_data, dct)

  r = urllib.urlopen(cfn_data["metadata_url"] + "?" + urllib.urlencode(dct))
  x = xml.etree.ElementTree.parse(r)

  return json.loads(x.find("DescribeStackResourceResult/StackResourceDetail/Metadata").text)

def deploy_signal(metadata, stdout, stderr, returncode):
  deploy_signal_id = [x for x in metadata["inputs"] if x["name"] == "deploy_signal_id"][0]["value"]
  r = urllib2.Request(deploy_signal_id,
                      json.dumps({"deploy_stdout": stdout,
                                  "deploy_stderr": stderr,
                                  "deploy_status_code": returncode}),
                      {"Content-Type": "application/json"})
  urllib2.urlopen(r)

cfn_data = get_cfn_init_data()
if cfn_data is None:
  sys.exit(0)

cfn_data = cfn_data["os-collect-config"]["cfn"]
metadata = describe_stack_resource(cfn_data)["deployments"][0]

with open("/tmp/script.sh", "w") as f:
  f.write(metadata["config"])
os.chmod("/tmp/script.sh", 0o755)

env = dict(os.environ)
for x in metadata["inputs"]:
  if x["value"] is not None:
    env[x["name"]] = str(x["value"])

p = subprocess.Popen("/tmp/script.sh", stdout = subprocess.PIPE,
                     stderr = subprocess.PIPE, cwd = "/tmp", env = env)
(stdout, stderr) = p.communicate()
os.unlink("/tmp/script.sh")

deploy_signal(metadata, stdout, stderr, p.returncode)

with open("/tmp/heat-agent-stdout", "w") as f:
  f.write(stdout)

with open("/tmp/heat-agent-stderr", "w") as f:
  f.write(stderr)
