#!/usr/bin/python
#
# Copyright 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import base64
import email.parser
import hashlib
import hmac
import itertools
import json
import os
import subprocess
import time
import urllib
import urllib2
import urlparse
import xml.etree.ElementTree


def get_user_data(filename):
    user_data = urllib.urlopen("http://169.254.169.254/latest/user-data")
    msg = email.parser.Parser().parse(user_data)
    for part in msg.walk():
        if part.get_filename() == filename:
            return part.get_payload()


def canonical_qs(d):
    l = []
    for k in sorted(d):
        v = urllib.quote(d[k].encode("utf-8"), safe="-_~")
        l.append(urllib.quote(k, safe="") + "=" + v)
    return "&".join(l)


def sign(cfn_config, d):
    d.update({"AWSAccessKeyId": cfn_config["access_key_id"],
              "SignatureVersion": "2",
              "SignatureMethod": "HmacSHA256"})

    url = urlparse.urlparse(cfn_config["metadata_url"])

    msg = "\n".join(["GET", url.netloc, url.path, canonical_qs(d)])
    h = hmac.new(str(cfn_config["secret_access_key"]), msg, hashlib.sha256)
    d["Signature"] = base64.b64encode(h.digest())

    return d


def describe_stack_resource(cfn_config):
    d = {"StackName": cfn_config["stack_name"],
         "Action": "DescribeStackResource",
         "LogicalResourceId": cfn_config["path"].split(".")[0]}

    d = sign(cfn_config, d)

    r = urllib.urlopen(cfn_config["metadata_url"] + "?" + urllib.urlencode(d))
    x = xml.etree.ElementTree.parse(r)

    return json.loads(x.find("DescribeStackResourceResult/" +
                             "StackResourceDetail/Metadata").text)


def deploy_signal(deployment, output, returncode):
    deploy_signal_id = [x for x in deployment["inputs"]
                        if x["name"] == "deploy_signal_id"][0]["value"]
    r = urllib2.Request(deploy_signal_id,
                        json.dumps({"deploy_stdout": output,
                                    "deploy_stderr": "",
                                    "deploy_status_code": returncode}),
                        {"Content-Type": "application/json"})
    urllib2.urlopen(r)


def main():
    cfn_init_data = get_user_data("cfn-init-data")
    if cfn_init_data is None:
        return

    cfn_config = json.loads(cfn_init_data)["os-collect-config"]["cfn"]

    for i in itertools.count(0):
        while True:
            try:
                metadata = describe_stack_resource(cfn_config)
                deployment = metadata["deployments"][i]
                break

            except IndexError:
                time.sleep(10)

        with open("/tmp/heat-agent-script-%d.sh" % i, "w") as f:
            f.write(deployment["config"])
        os.chmod("/tmp/heat-agent-script-%d.sh" % i, 0o755)

        env = dict(os.environ)
        for x in deployment["inputs"]:
            if x["value"] is not None:
                env[x["name"]] = str(x["value"])

        p = subprocess.Popen("/tmp/heat-agent-script-%d.sh" % i,
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                             cwd="/tmp", env=env)

        output = ""
        with open("/tmp/heat-agent-output-%d.log" % i, "w") as f:
            while True:
                data = p.stdout.read(4096)
                if data == "":
                    break

                f.write(data)
                f.flush()
                output += data

        deploy_signal(deployment, output, p.returncode)


if __name__ == "__main__":
    main()
